#!/usr/bin/env bash
set -euo pipefail

lookup_environment() {
  trace "$*"
  local env_name="$1"
  # look up the environment
  local value=""

  # Check if the variable exists before trying to access it
  if declare -p "$env_name" &>/dev/null; then
    eval "value=\${$env_name}"
  fi

  if [[ -n "$value" ]]; then
    log "$env_name read from the environment variable"
  else
    # look up the .env file if it exists
    if [[ -f .env ]]; then
      # Use a subshell to source .env without polluting the parent environment
      value=$(
        # shellcheck disable=SC1091 # file exists check above
        source .env
        if declare -p "$env_name" &>/dev/null; then
          eval "echo \${$env_name}"
        else
          echo ""
        fi
      )

      if [[ -n "$value" ]]; then
        log "$env_name read from .env file"
      fi
    fi
  fi
  echo "$value"
}
