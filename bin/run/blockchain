#!/usr/bin/env bash
set -euo pipefail

function public_from_private() {
  local private_key="$1"
  cast wallet address --private-key "$private_key"
}
export -f public_from_private

function ens_from_public() {
  trace "$*"
  local public_key="$1"

  local ens_name
  # shellcheck disable=SC2154
  ens_name=$(cast lookup-ens --rpc-url $RPC_URL "$public_key" 2>/dev/null) || true
  [[ -n "$ens_name" ]] && echo "$ens_name" || echo "$public_key"
}
export -f ens_from_public

function chain_id() {
  local chainid_hex
  # shellcheck disable=SC2154
  chainid_hex=$(cast chain-id --rpc-url $RPC_URL)
  local result
  result=$((16#${chainid_hex#0x}))
  echo "$result"
}
export -f chain_id

function lookup_network() {
  trace "$*"
  local key="$1"
  local field="${2:-address}"

  local network
  network=$(network_name)
  debug "network=$network"

  # Only proceed if network is not empty
  if [[ -n "$network" ]]; then
    # shellcheck disable=SC2154
    jq -r ".${key}.${field} // \"\"" "$BAO_BASE_SCRIPT_DIR/bcinfo.$network.json"
    local jq_status=$?
    debug "jq exit status was: ${jq_status}"
    if [[ $jq_status -ne 0 ]]; then
      debug "jq failed, lookup_network exiting with 1"
      exit 1
    fi
  else
    echo ""
  fi
}
export -f lookup_network

# Add a simpler function that just gets the network name for a chain ID
function network_name() {
  local chain
  chain=$(chain_id) # lint-bash disable=command-substitution
  debug "looking up '${chain}' in $BAO_BASE_SCRIPT_DIR/networks.json"
  jq -r ".[\"$chain\"] // \"\"" "$BAO_BASE_SCRIPT_DIR/networks.json"
}
export -f network_name

# # Fetch the chain list JSON from chainid.network and filter for your chain id
# chain_info=$(curl -s https://chainid.network/chains.json | jq --argjson id "$CHAIN_ID" '.[] | select(.chainId == $id)')

# if [ -n "$chain_info" ]; then
#     echo "Chain info for Chain ID $CHAIN_ID:"
#     echo "$chain_info" | jq .
# else
#     echo "No matching chain info found for Chain ID $CHAIN_ID"
# fi
