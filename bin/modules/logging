#!/usr/bin/env bash
set -e -o pipefail

if [[ -n "${GUARD_SOURCING_LOGGING:-}" ]]; then return; fi; GUARD_SOURCING_LOGGING=1
[[ -n "${LOADING:-}" ]] && echo "loading ${BASH_SOURCE[0]} $@..."

# set the default logging level to warn (and above)
export LOGGING_LEVEL=${LOGGING_LEVEL:-2}

logging_config() {
    if [[ -n "$1" ]]; then
        LOGGING_LEVEL=$(_logging_to_value "$1")
        logging info "logging level is now $(_logging_to_name $LOGGING_LEVEL) ($LOGGING_LEVEL)"
    fi
}

# set the default output FD, this is changed to the first free below so logging doesn't clog things up
export LOGGING_FILE_DESCRIPTOR=2
export LOGGING_SENSITIVE_TEXT=${LOGGING_SENSITIVE_TEXT:-"hide"}

# hidden text in log messages
declare -A _logging_hidden_text

logging_hide() {
    logging trace "${FUNCNAME[0]}($*)..."
    _logging_hidden_text["$1"]="${2:-***hidden***}"
}

logging() {
    local level_str
    level_str=$(echo "$1" | tr '[:lower:]' '[:upper:]') || exit $?
    local level
    level=$(_logging_to_value "$1")
    shift
    local message="$*"
    # remove hidden text
    for key in "${!_logging_hidden_text[@]}"; do
        local value="${_logging_hidden_text[$key]}"
        # Replace all occurrences of key with value in the log message
        [[ "$LOGGING_SENSITIVE_TEXT" == "show" ]] && message="${message//$key/$value}"
    done
    # TODO: automatic indentation via $#BASH_SOURCE
    if [[ "$level" -le "$LOGGING_LEVEL" ]]; then
        local indentation=5
        local indent
        indent=$(printf "%${indentation}s  ")
        message=${message//$'\n'/$'\n'"$indent"}
        local format
        format=$(printf "%-${indentation}s:" "$level_str")
        if [[ "$LOGGING_LEVEL" -ge "3" || "$level" -le "0" ]]; then
            format+=" ${BASH_SOURCE[1]}:${BASH_LINENO[0]}"
            # if [[ "$LOGGING_LEVEL" -ge "4" ]]; then
            #     format+=" ${FUNCNAME[1]}()"
            # fi
            format+=":"
        fi
        # echo "$(date '+%Y-%m-%d %H:%M:%S,%3N') - $format
        echo "$format $message" >&"$LOGGING_FILE_DESCRIPTOR"
    fi
    if [[ "$level" -lt "0" ]]; then
        exit 1
    fi
 }

# Define the mapping array: each element is "level:number"
_LOGGING_LEVELS=(
    :2  # default to level 2
    debug:4
    trace:3
    info:2
    warn:1
    error:0
    fail:-1
    fatal:-1
 )

# Lookup: given a level name, return its number.
_logging_to_value() {
    local name
    # convert name to lowercase to ensure case-insensitive matching
    name=$(echo "$1" | tr '[:upper:]' '[:lower:]')  || exit $?
    for pair in "${_LOGGING_LEVELS[@]}"; do
        IFS=":" read -r key value <<< "$pair"
        if [[ "$key" == "$name" || "$value" == "$name" ]]; then
            echo "$value"
            return 0
        fi
    done
    echo "unknown logging level: $1." >&2
    return 1
}

# Lookup: given a level number, return the corresponding name.
_logging_to_name() {
    local level="$1"
    for pair in "${_LOGGING_LEVELS[@]}"; do
        IFS=":" read -r key value <<< "$pair"
        if [[ "$value" -eq "$level" ]]; then
            echo "$key"
            return 0
        fi
    done
    echo "unknown logging level name: $1." >&2
    return 1
}


# use file descriptor 8 (3-9 are available) for logging output, fail if it is already in use
# TODO: make this number configurable (somehow?), or search for the first free one
# as it is just sent to stdout, without buffering
# as we're only opening it once, there is no need to close it
# shellcheck disable=SC2312 # no need to check individual commands as we have set -o pipefail

first_free_fd() {
    local current_fds=$(lsof -p $$ | awk '$4 ~ /^([0-9]+)[urw]*$/ {print +$4}' | sort -n)
    prev=2
    for fd in $(echo "$current_fds"); do
        if [ $((fd)) -gt $((prev + 1)) ]; then
            echo $((prev + 1))
            return
        fi
        prev=$fd
    done
    echo $((prev + 1))
}

LOGGING_FILE_DESCRIPTOR=$(first_free_fd)
# exec 8> >(stdbuf -o0 cat)
case "$LOGGING_FILE_DESCRIPTOR" in
    3 ) exec 3>&1
        ;;
    4 ) exec 4>&1
        ;;
    5 ) exec 5>&1
        ;;
    6 ) exec 6>&1
        ;;
    7 ) exec 7>&1
        ;;
    8 ) exec 8>&1
        ;;
    9 ) exec 9>&1
        ;;
esac