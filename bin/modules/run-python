#!/usr/bin/env bash
set -euo pipefail

# If the debug function doesn't exist, create a no-op version
if [[ "$(type -t debug)" != "function" ]]; then
    debug() { return 0; }
fi

# poetry is installed here
NEW_PATH="$HOME/.local/bin"
if [[ ":$PATH:" != *":$NEW_PATH:"* ]]; then
  export PATH="$PATH:$NEW_PATH"
  debug "Added $NEW_PATH to PATH"
fi

# Set the path to the Poetry project and the target script
SCRIPT="$1"; shift
debug "Script to run: $SCRIPT"
debug "Arguments: $*"

# Step 1: Install dependencies using Poetry
DEPENDENCIES_DIR="$BAO_BASE_LIB_DIR/$SCRIPT"
if [ ! -d "$DEPENDENCIES_DIR" ]; then
    debug "No dedicated directory for $SCRIPT, using global dependencies directory"
    DEPENDENCIES_DIR="$BAO_BASE_LIB_DIR"
fi

debug "Dependencies directory: $DEPENDENCIES_DIR"

# Ensure Poetry is installed
if ! command -v poetry &> /dev/null; then
    echo "error: Poetry is not installed. Please install Poetry and try again."
    exit 1
fi

# set up the poetry config
export POETRY_VIRTUALENVS_OPTIONS_NO_PIP=true
export POETRY_NO_INTERACTION=1
debug "Poetry environment variables set"

# get round any python version constraints
debug "Installing global dependencies"
{
    poetry install --no-root --directory "$BAO_BASE_LIB_DIR" 2>&3 | grep -i " - Installing" >&2 || true
} 3>&2

debug "Determining Python version for $DEPENDENCIES_DIR"
pyversion=$(poetry run --directory "$BAO_BASE_LIB_DIR" python "$BAO_BASE_LIB_DIR/matching-python.py" --directory="$DEPENDENCIES_DIR") || exit $?
debug "Selected Python version: $pyversion"

if [[ -n "$pyversion" ]]; then
    debug "Setting Python version for Poetry environment"
    poetry --directory "$DEPENDENCIES_DIR" env use "$pyversion" > /dev/null
fi

# install the dependencies directing the output to stderr
# this output is nice to see, but not nice if we are running a filter.
debug "Installing script-specific dependencies"
{
    poetry install --no-root --directory "$DEPENDENCIES_DIR" 2>&3 | grep -i " - Installing" >&2 || true
} 3>&2

# Step 2: Run the target Python script in the caller's directory
if [ -f "$DEPENDENCIES_DIR/$SCRIPT.py" ]; then
    debug "Running Python script: $DEPENDENCIES_DIR/$SCRIPT.py"
    poetry run --directory "$DEPENDENCIES_DIR" python "$DEPENDENCIES_DIR/$SCRIPT.py" "$@"
else
    debug "Running Python command: $SCRIPT"
    poetry run --directory "$DEPENDENCIES_DIR" "$SCRIPT" "$@"
fi
