#!/bin/bash
set -e -o pipefail

if [[ -n "${GUARD_SOURCING_TRANSACTING:-}" ]]; then return; fi; GUARD_SOURCING_TRANSACTING=1
[[ -n "${LOADING:-}" ]] && echo "loading ${BASH_SOURCE[0]}..."

# shellcheck disable=SC1091
source "$(dirname "${BASH_SOURCE[0]}")/logging"
# shellcheck disable=SC1091
source "$(dirname "${BASH_SOURCE[0]}")/argparsing"
# shellcheck disable=SC1091
source "$(dirname "${BASH_SOURCE[0]}")/validating"

_transacting_deploy_contract() {
    logging trace "${FUNCNAME[0]}($*)..."
    local purpose="$1"
    shift
    local args="$@"
    logging debug "purpose=$purpose."

    # TODO: have a way to build a spec from an array of args, or have argparsing_parse_args take that array
    local args_json=$(argparsing_argparse '{"arguments":[
        {"names": ["--contract-name"], "nargs": "?"},
        {"names": ["file_contract"], "nargs": 1},
        {"names": ["--constructor-args"], "nargs":"+"},
        {"names": ["--broadcast", "--no-broadcast"], "action": "store_boolean", "default": true},
        {"names": ["--verify", "--no-verify"], "action": "store_boolean"}]}' $args)
    local contract_name
    contract_name=$(argparsing_value "contract_namer" "$args_json")
    logging debug "contract_name=$contract_name."

    # get the contract to deploy
    local file_contract
    file_contract=$(argparsing_value "file_contract" "$args_json")

    # check the files in the out directory are correct
    # we could just build but that assumes we know exactly how it was built, which we dont'
    if [ ! validating_foundry_build "$file_contract" ]; then logging fatal "invalid build files while deploying

    logging debug "Deploying $file_contract."
    local contract_type="${file_contract#*:}"
    logging debug "contract_type=$contract_type."
    logging debug "contract_name=$contract_name."

    local contract_tag
    contract_tag=${contract_name}$([[ "$contract_name" == "" ]] && echo "$contract_type" || echo " ($contract_type)")${purpose:+ $purpose}

    logging info "Deploying the $contract_tag contract..."

    # TODO: allow the defaults to be owverridden
    local create_args="$file_contract"
    create_args+=" --rpc-url $RPC_URL"
    create_args+=" --private-key $default_private_key"
    create_args+=" --etherscan-api-key $ETHERSCAN_API_KEY"
    local broadcast
    broadcast=$(argparsing_value "broadcast" "$args_json")
    [[ "$broadcast" != "false" ]] && create_args+=" --broadcast"
    local verify
    verify=$(argparsing_value "verify" "$args_json")
    verify=${verify:-$default_verify}
    # override the default value for verify (if set)
    [[ "$verify" != "false" ]] && create_args+=" --verify"
    # constructor args always goes last
    local constructor_args
    constructor_args=$(argparsing_value "constructor_args" "$args_json")
    [ -n "$constructor_args" ] && create_args+=" --constructor-args $constructor_args"


    logging info "$forge_exe" create "$create_args"
    local response
    if ! response=$("$forge_exe" create $create_args); then logging fatal "forge create failed for the $contract_tag contract."; fi
    logging trace "forge create->${response}."

    local deployer
    deployer=$(echo "$response" | awk '/Deployer:/ {print $2}')
    local address
    address=$(echo "$response" | awk '/Deployed to:/ {print $3}')
    local tx_hash
    tx_hash=$(echo "$response" | awk '/Transaction hash:/ {print $3}')

    if [ -z "$address" ]; then
        logging fail "Failed to deploy the $contract_tag contract."
        return 1
    fi

    local block_number
    block_number=$(cast tx $tx_hash --rpc-url $RPC_URL | awk '/blockNumber/ {print $2}')

    logging info "Deployed the $contract_tag contact at $address"
    logging info "   by $deployer tx: $tx_hash in block $block_number."

    # return the result
    local result
    result=$(jq -nc --arg address "$address" --arg tx_hash "$tx_hash" --arg block_number "$block_number" '{
        address:$address, tx_hash:$tx_hash, block_number:$block_number}')
    logging trace "${FUNCNAME[0]}->$result."
    echo "$result"
    # extract using jq '.address', jq '.tx_hash or jq '.block_number'
}

transacting_deploy_contract() {
    local args="$@"
    _transacting_deploy_contract "non-upgradeable" "$args"
}

transacting_deploy_upgradeable_contract() {
    logging debug "deploy_upgreadable_contract($*)"
    local args="$@"

    # validate implementation

    # deploy implementation
    local impl
    impl=$(_transacting_deploy_contract "implementation" "$args")
    logging trace "impl=$impl."
    local impl_address
    impl_address=$(jq -r '.address' <<< "$impl")
    logging debug "impl_address=$impl_address."

    # save deployed data, for later validation

    # deploy proxy
    local proxy
    proxy=$(_transacting_deploy_contract 'UUPS proxy' \
        'lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy' \
        --constructor-args "$impl_address" '0x') || exit $?
    logging trace "proxy=$proxy."

    # logging info "impl=$impl"
    # logging info "proxy=$proxy"
    local result
    result=$(jq -n --argjson proxy "$proxy" --argjson impl "$impl" '$proxy + {"implementation": $impl}')
    logging trace "${FUNCNAME[0]}->$result."
    echo "$result"
}

# TODO: override defaults
function transacting_send () {
    logging trace "${FUNCNAME[0]}($*)..."
    "$cast_exe" send "$@" --rpc-url "$RPC_URL" --private-key "$default_private_key"
}

# TODO: override defaults
function transacting_call () {
    logging trace "${FUNCNAME[0]}($*)..."
    "$cast_exe" call "$@" --rpc-url "$RPC_URL"
}

function transacting_get_public_from_private() {
    local private_key="$1"
    cast wallet address --private-key "$private_key"
}


#####################################################################################
# private functions

_transacting_hide_sensitive_data_in_logs() {
    for args_json in "$@"; do
        for field in "private_key" "etherscan_api_key"; do
            logging trace "hiding $field in logs"
            local value
            value=$(argparsing_value $field "$args_json")
            if [ -n "$value" ]; then
                local replacement="***${field}***"
                # add a user friendly replacement, e.g. public key for a private key
                if [[ "$value" =~ ^0x[0-9a-fA-F]{64}$ ]]; then
                    logging trace "found private key"
                    local public_key
                    public_key=$(transacting_get_public_from_private "$value")
                    [ -n "$public_key" ] && replacement="***${field} [public key:$public_key]***"
                fi
                logging_hide "$value" "$replacement"
            fi
        done
    done
}

_transacting_lookup_env() {
    logging trace "${FUNCNAME[0]}($*)..."
    local env_name="$1"
    local field_name="$2"
    # look up the environment
    local value=""

    # Check if the variable exists before trying to access it
    if declare -p "$env_name" &>/dev/null; then
        eval "value=\${$env_name}"
    fi

    logging debug "   environment $env_name=$value"
    if [[ -n "$value" ]]; then
        logging info "$field_name taken from the environment variable $env_name"
    else
        # look up the .env file if it exists
        if [[ -f .env ]]; then
            # Use a subshell to source .env without polluting the parent environment
            value=$(
                # shellcheck disable=SC1091 # file exists check above
                source .env
                if declare -p "$env_name" &>/dev/null; then
                    eval "echo \${$env_name}"
                else
                    echo ""
                fi
            )

            logging debug "   .env $env_name=$value"
            if [[ -n "$value" ]]; then
                logging info "$field_name taken from the .env file variable $env_name"
            fi
        fi
    fi
    logging trace "${FUNCNAME[0]}->$value."
    echo "$value"
}

# update the _transacting_config global from env, if not already there
_transacting_default_from_env() {
    logging trace "${FUNCNAME[0]}($*)..."
    local origin="$1" # this is the longest arg in the list (preferring long form)
    local env_name="$2" # the environment variable name
    local existing_json="$3" # the existing args_json to update
    local field_name
    # make the field name out of the origin but de-hyphenating it
    field_name=$(echo "$origin" | sed -E 's/^-+//; s/-/_/g') || exit $?

    if ! argparsing_has "$field_name" "$existing_json"; then
        local value
        value=$(_transacting_lookup_env "$env_name" "$field_name")
        if [ -n "$value" ]; then
            existing_json=$(argparsing_add "$field_name" "$existing_json" "$value" "$origin")
        fi
    fi
    echo "$existing_json"
}

_transacting_arg_spec='{"arguments":[
{"names":["--rpc-url"], "default": "local"},
{"names":["--private-key"]},
{"names":["--etherscan-api-key"]},
{"names": ["--verify", "--no-verify"], "action": "store_boolean"}
]}'

forge_exe=$(command -v forge)
logging info "using forge at $forge_exe."
cast_exe=$(command -v cast)
logging info "using cast at $cast_exe."

args_json=$(argparsing_argparse "$_transacting_arg_spec" "$@")

# read environment variables or .env file, in that order of precedence
args_json=$(_transacting_default_from_env "--private-key" "PRIVATE_KEY" "$args_json")
args_json=$(_transacting_default_from_env "--etherscan-api-key" "ETHERSCAN_API_KEY" "$args_json")
_transacting_hide_sensitive_data_in_logs "$args_json"

# set the global variables to be used in subsequent functions
export RPC_URL=$(argparsing_value "rpc_url" "$args_json")
##############
export LOCAL=""
###### -----
if [[ "$RPC_URL" == "local" || "$RPC_URL" == *"localhost"* ]]; then
    LOCAL="local"
    ###### -----
fi
# Get the chain id from cast and convert it to decimal
chainid_hex=$(cast chain-id --rpc-url $RPC_URL)
export CHAIN_ID=$((16#${chainid_hex#0x}))
###### --------
# common chain names
declare -A networks=(
    [1]="mainnet"
    [3]="ropsten"
    [4]="rinkeby"
    [5]="goerli"
    [42]="kovan"
    [11155111]="sepolia"
    [17000]="holesky"
    [61]="classic"
    [6]="classicKotti"
    [42161]="arbitrum"
    [421613]="arbitrum-goerli"
    [421614]="arbitrum-sepolia"
    [8453]="base"
    [84531]="base-goerli"
    [84532]="base-sepolia"
    [56]="bnb"
    [97]="bnbt"
    [59144]="linea"
    [59140]="linea-goerli"
    [59141]="linea-sepolia"
    [137]="matic"
    [80002]="matic-amoy"
    [80001]="matic-mumbai"
    [10]="optimism"
    [420]="optimism-goerli"
    [11155420]="optimism-sepolia"
    [100]="xdai"
)
export CHAIN_NAME=${networks[$CHAIN_ID]:-$CHAIN_ID}
###### ----------
default_private_key=$(argparsing_value "private_key" "$args_json")
export ETHERSCAN_API_KEY=$(argparsing_value "etherscan_api_key" "$args_json")
###### -----------------
# get the default verify - if not specified, then use the default for the rpc_url
default_verify=$(argparsing_value "verify" "$args_json")
if [[ "$default_verify" == "" ]]; then
    # nothing specified, default depending on the network
    if [[ "$LOCAL" == "local" ]]; then
        default_verify="false"
    else
        default_verify="true"
    fi
fi

# # Fetch the chain list JSON from chainid.network and filter for your chain id
# chain_info=$(curl -s https://chainid.network/chains.json | jq --argjson id "$CHAIN_ID" '.[] | select(.chainId == $id)')

# if [ -n "$chain_info" ]; then
#     echo "Chain info for Chain ID $CHAIN_ID:"
#     echo "$chain_info" | jq .
# else
#     echo "No matching chain info found for Chain ID $CHAIN_ID"
# fi

# tell the user what the defaults are
logging info "transacting on${LOCAL:+ $LOCAL} chain $CHAIN_ID${CHAIN_NAME:+ ($CHAIN_NAME)}"
logging info "transaction defaults:$(argparsing_args $args_json)"