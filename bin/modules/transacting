#!/bin/bash

if [[ -n "${GUARD_SOURCING_TRANSACTING:-}" ]]; then return; fi; GUARD_SOURCING_TRANSACTING=1

source $(dirname "${BASH_SOURCE[0]}")/logging
source $(dirname "${BASH_SOURCE[0]}")/argparsing

_transacting_default_options_json=""
_transacting_default_options_spec='{"arguments": [
        {"names": ["--rpc-url"]},
        {"names": ["--private-key"]},
        {"names": ["--etherscan-api-key"]}
    ]}'

_transacting_deploy_arguments_spec='{"arguments": [
        {"names": ["--constructur-args"], "nargs":"*"},
        {"names": ["--verify", "--no-verify"], "action": "store_boolean"},
        {"names": ["--etherscan-api-key"]}
    ]}'


## Options:
##   --verify                   Verify the source (needs --etherscan-api-key)
##   --rpc-url RPC-URL          Set the URL of the RPC node to send transactions to
##   --private-key KEY          Private key for transaction signing
##   --etherscan-api-key KEY    Private key for transaction signing
    ##   -h, --help             Displays this help and exists
    ##   -v, --version          Displays output version and exists
    ##   $PROG -l yep -q -l nop -i -l yes

transacting_default_options() {
    logging debug "_transacting_default_options_json='$_transacting_default_options_json'"
    # return the args processed
    argparsing_args "$_transacting_default_options_json"
}

transacting_config_value() {
    logging debug "$FUNCNAME($*)..."
    local field="$1"
    local output=$(argparsing_option "$_transacting_default_options_json" "$field")
    logging debug "$FUNCNAME()->'$output'"
    echo "$output"
}

transacting_config() {
    logging debug "$FUNCNAME($*)..."
    _transacting_default_options_json=$(argparsing_argparse "$_transacting_default_options_spec" "$@")
    logging debug "default option=$_transacting_default_options_json"
    _transacting_default_options_json=$(argparsing_remove_unknown "$_transacting_default_options_json")
    logging info "defaults for all transactions$(transacting_default_options)"

    # if [[ -z $(argparsing_has --option rpc-url -- "$_transacting_default_options_json") ]]; then
    #     logging info "--rpc-url not given and it is never defaulted as it is dangerous"
    #     logging info "pass --rpc-url RPC-URL into transacting_config"
    #     logging info "where RPC-URL can be:"
    #     logging info "    a foundry.toml \[rpc_endpoint\] e.g. \"mainnet\""
    #     logging info " or \"http://...\""
    #     logging fail "no rpc-url passed into transacting_config"
    # else
    #     logging info "rpc-url=$rpc_url"
    # fi

    _transacting_default_from_env "--private-key" "PRIVATE_KEY"
    _transacting_default_from_env "--etherscan-api-key" "ETHERSCAN_API_KEY"

    logging info "defaults updated from environment:$(transacting_default_options)"
}

transacting_deploy() {
    logging debug "deploy_contract($*)"
    local overrides_json=argparsing_argparse "$@"

    # merge the given args with the defaults
    local args=$(argparsing_merge "$_transacting_default_options_json" "$overrides_json")



    local contract_tag=$contract_name$([[ "$contract_name" == "" ]] && echo " $contract_type" || echo " ($contract_type)")${purpose:+ $purpose}

    logging info "transacting the $contract_tag contact..."
    local cmd "forge create --rpc-url $rpc_url \
        --private-key $private_key \
        --etherscan-api-key $etherscan_api_key \
        "$source_file:$contract_type" \
        --broadcast \
        $constructor_args \
        "
    logging info "$cmd"

    # local response=$(forge create --rpc-url $rpc_url \
    #     --private-key $private_key \
    #     --etherscan-api-key $etherscan_api_key \
    #     "$source_file:$contract_type" \
    #     --broadcast \
    #     $constructor_args \
    #     )
    # logging debug "$response"
    # local deployer=$(echo "$response" | awk '/Deployer:/ {print $2}')
    # local address=$(echo "$response" | awk '/Deployed to:/ {print $3}')
    # local transaction=$(echo "$response" | awk '/Transaction hash:/ {print $3}')

    # if [ -z "$address" ]; then
    #     #TODO manage spaces like constructor_args above
    #     logging fail "Failed to deploy the $contract_tag contract."
    # fi
    # # return the result
    # echo $address

    # logging info "Deployed the $contract_tag contact at $address"
    # logging info "   by $deployer tx: $transaction"
    # log_field "$name" "$address"
}

# transacting_deploy_upgradeable() {
#     local args="$1"
#     local contract_name=$(echo "$args" | yq ".contract-type // \"\"")

#     # verify implementation

#     # deploy implementation
#     local implementation_args=$(echo "$args" | yq '. + {"purpose": "implementation"}')
#     logging debug "implementation_args=$implementation_args"
#     local implementation_address=$(transacting_deploy "$implementation_args")
#     # save deployed data

#     # deploy proxy
#     local proxy_args=$(echo "$args" | yq ". + {\"purpose\": \"UUPS proxy\",
#         \"source-file\": \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\",
#         \"contract-name\": \"$contract_name\",
#         \"contract-type\": \"ERC1967Proxy\",
#         \"constructor-args\": \"$implementation_address 0x\"}")
#     local proxy_address=$(transacting_deploy "$proxy_args")

#     echo $proxy
# }

#####################################################################################
# private functions

_transacting_lookup_env() {
    logging debug "$FUNCNAME($*)..."
    local env_name="$1"
    # look up the environment
    local value="${!env_name}"
    logging debug "   environment $env_name=$value"
    if [[ -n "$value" ]]; then
        logging info "$field_name taken from the envronment variable $env_name"
    else
        # look up the .env file if it exists
        if [[ -f .env ]]; then
            source .env
            value="${!env_name}"
            logging debug "   .env $env_name=$value"
            if [[ -n "$value" ]]; then
                logging info "$field_name taken from the .env file variable $env_name"
            fi
        fi
    fi
    logging debug "$FUNCNAME()->'$value'"
    echo "$value"
}

# update the _transacting_config global from env, if not already there
_transacting_default_from_env() {
    logging debug "$FUNCNAME($*)..."
    local origin="$1" # this is the longest arg in the list (preferring long form)
    local env_name="$2" # the environment variable name
    local field_name=$(echo "$origin" | sed -E 's/^-+//; s/-/_/g')

    if ! argparsing_has "$_transacting_default_options_json" "$field_name"; then
        local value=$(_transacting_lookup_env "$env_name")
        if [ -n "$value" ]; then
            _transacting_default_options_json=$(argparsing_add "$_transacting_default_options_json" "$field_name" "$value" "$origin")
        fi
    fi
}
