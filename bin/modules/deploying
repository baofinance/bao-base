#!/bin/bash
set -euo pipefail
# trap 'echo "Error: $0:$LINENO: exit code: $?"; exit 1' ERR
trap 'logging fatal $0:$LINENO: exit code: $?' ERR

[[ -n "${LOADING:-}" ]] && echo "loading ${BASH_SOURCE[0]} $@..."

# parse the arguments for setting up the logging
# shellcheck disable=SC1091 # no dir check
source "$(dirname "${BASH_SOURCE[0]}")/argparsing"

# shellcheck disable=SC1091 # no dir check
source "$(dirname "${BASH_SOURCE[0]}")/logging"
logging_config "$(argparsing_argparse_value "v" '{"arguments": [{"names": ["-v"], "action": "store_count"}]}' "$@")"

# parse the arguments for setting up the transaction defaults
# shellcheck disable=SC1091 # no dir check
source "$(dirname "${BASH_SOURCE[0]}")/transacting"
transacting_config "$@"

# set up recording of essential information for running tests against the deployed contracts
# shellcheck disable=SC1091 # no dir check
source "$(dirname "${BASH_SOURCE[0]}")/recording" $CHAIN_ID $CHAIN_NAME

function record() {
    local field="$1"
    local value="$2"
    recording_field "$field" "$value"
}

function record_numeric() {
    local field="$1"
    local value="$2"
    recording_field_numeric "$field" "$value"
}

function get_deployer_address() {
    local private_key="${1:-$default_private_key}"
    transacting_get_public_from_private "$default_private_key"
}

function send() {
    transacting_send "$@"
}

function call() {
    transacting_call "$@"
}

function deploy() {
    transacting_deploy_contract "$@"
}

function deploy_upgradeable() {
    transacting_deploy_upgradeable_contract "$@"
}

function networkdata() {
    logging trace "${FUNCNAME[0]}($*)..."
    local id="$1"
    local field="${2:-address}"
    local result
    result=$(jq -rc --arg id "$id" --arg field "$field" '
        .[$id][$field]
        ' < "./lib/bao-base/script/addresses.${CHAIN_NAME}.json")
    logging trace "${FUNCNAME[0]}->$result."
    echo "$result"
}
