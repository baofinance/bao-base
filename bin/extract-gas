#! /bin/sh
# extracts the gas report from
# $ forge test --gas-report
# and reformats it to contain minimal information
# The output should be stored in git - that's your job :-)

# echo $0 "run on" `date`

awk  -v cols=2 -v width=10 -v total_width=100 '
BEGIN {
  FS="|"
  # Define the format string with variable widths
  first = 1
  name_width = total_width - (cols * (width + 1)) - 4
  value_width = width - 2 # 2 spaces either size
}

# Contract header
/^\| .*\.sol:.* \|/ {
  if (first) {
    first = 0
  } else {
    printf "╰%s┴%s┴%s╯\n", str_repeat("─", name_width + 2), str_repeat("─", value_width + 2), str_repeat("─", value_width + 2)
    printf "\n"
  }
  gsub(/^ +| contract +$/, "", $2)
  printf "╭%s╮\n", str_repeat("─", total_width - 2)
  printf "│ %-" total_width - 4 "s │\n", $2
  printf "╞%s╤%s╤%s╡\n", str_repeat("═", name_width + 2), str_repeat("═", value_width + 2), str_repeat("═", value_width + 2)
}

# Functions data header
/^\| Function Name +\|/ {
  printf "│ %-" name_width "s │ %-" value_width "s │ %-" value_width "s │\n", "Function Name", "median", "max"
  printf "├%s┼%s┼%s┤\n", str_repeat("─", name_width + 2), str_repeat("─", value_width + 2), str_repeat("─", value_width + 2)
}

# Function Data line
/^\| [a-zA-Z_$]+ +\| [^|]+ \| [^|]+ \| [^|]+ \| [^|]+ \| [^|]+ \|$/ {
  gsub(/^ +| +$/, "", $2)
  gsub(/^ +| +$/, "", $5)
  gsub(/^ +| +$/, "", $6)
  printf "│ %-" name_width "s │ %" value_width "s │ %" value_width "s │\n", $2, add_commas($5), add_commas($6)
}

END {
  printf "╰%s┴%s┴%s╯\n", str_repeat("─", name_width + 2), str_repeat("─", value_width + 2), str_repeat("─", value_width + 2)
}


# round a number
function round(n) {
    return int(n + 0.5)
}

# Function to repeat a character n times
function str_repeat(char, count) {
    result = ""
    for (i = 0; i < count; i++) {
        result = result char
    }
    return result
}

# add commas
function add_commas(n) {
    # Convert the number to a string
    num_str = n ""
    # Initialize variables
    result = ""
    len = length(num_str)
    count = 0

    # Loop through the number from right to left
    for (i = len; i > 0; i--) {
        count++
        result = substr(num_str, i, 1) result
        # Insert a comma after every third digit (but not at the start)
        if (count % 3 == 0 && i != 1) {
            result = "," result
        }
    }
    return result
}
'