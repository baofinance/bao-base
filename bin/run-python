#!/usr/bin/env bash
set -euo pipefail
shopt -s extdebug

# assumed environment variables - also keeps shellcheck happy
BAO_BASE_BIN_DIR=$BAO_BASE_BIN_DIR
BAO_BASE_DIR=$BAO_BASE_DIR
BAO_BASE_OS=$BAO_BASE_OS
BAO_BASE_VERBOSITY=$BAO_BASE_VERBOSITY

# Set the path to the script
SCRIPT="$1"
shift
debug "Script to run: $SCRIPT"
debug "Arguments: $*"
debug "Verbosity level: $BAO_BASE_VERBOSITY"

# Set up directories: if "script" is a directory, use
if [ ! -d "$BAO_BASE_BIN_DIR/$SCRIPT" ]; then
  DEPENDENCIES_DIR="$BAO_BASE_BIN_DIR"
else
  DEPENDENCIES_DIR="$BAO_BASE_BIN_DIR/$SCRIPT"
fi
debug "Dependencies directory: $DEPENDENCIES_DIR"

# don't touch .profile or .bashrc
export UV_UNMANAGED_INSTALL=1

# Local directories for tools and environments
# shellcheck disable=SC2154
UV_DIR="$BAO_BASE_TOOLS_DIR/uv"
VENV_DIR="$DEPENDENCIES_DIR/.venv"

# environment variables used by uv
export UV_PYTHON_BIN_DIR="$BAO_BASE_TOOLS_DIR/python/bin" # where it installs python
export UV_CACHE_DIR="$BAO_BASE_TOOLS_DIR/uv-cache"        # cache directory for dependencies

# Define uv and virtual environment paths based on OS
if [[ "$BAO_BASE_OS" == "windows" ]]; then
  VENV_PYTHON_PATH="$VENV_DIR/Scripts/python.exe"
  UV_BIN="$UV_DIR/uv.exe"
else
  VENV_PYTHON_PATH="$VENV_DIR/bin/python"
  UV_BIN="$UV_DIR/uv"
fi

mutex_acquire "uv"

# Install uv locally
if [[ ! -x "$UV_BIN" ]]; then
  debug "uv not found at $UV_BIN, installing to $UV_DIR..."

  # Create only a temp directory for Cargo/Rustup (still needed)
  temp_install_dir="$BAO_BASE_TOOLS_DIR/cargo"

  # Download and execute the script directly without saving to a temp file
  installation_output=$(curl -fsSL https://astral.sh/uv/install.sh | CARGO_HOME="$temp_install_dir" RUSTUP_HOME="$temp_install_dir/rustup" UV_INSTALL_DIR="$UV_DIR" NO_MODIFY_PATH=1 bash 2>&1) || {
    rm -rf "$temp_install_dir"
    error "Failed to install uv"
    info 1 "Installation output: $installation_output"
    exit 1
  }

  # Output the installation results through the info function
  info 1 "$installation_output"
  rm -rf "$temp_install_dir"
  debug "uv installed successfully to: $UV_BIN"
fi

mutex_release "uv"

debug "Using uv at: $UV_BIN: $($UV_BIN --version)" # lint-bash disable=command-substitution
UV_CMD=("$UV_BIN")

# get verbosity flags for UV based on BAO_BASE_VERBOSITY
if [[ "${BAO_BASE_VERBOSITY:-0}" -lt 0 ]]; then
  UV_CMD+=("-qq" "--no-progress") # Quiet mode
else
  case "${BAO_BASE_VERBOSITY:-0}" in
    0) UV_CMD+=("-qq") ;;
    1) UV_CMD+=("-q") ;;
    2) ;; # Normal verbosity - don't add any flags
    *) UV_CMD+=("--verbose") ;;
  esac
fi
debug "Using command: ${UV_CMD[*]}"

# Check for pyproject.toml
PYPROJECT_TOML="$DEPENDENCIES_DIR/pyproject.toml"
if [[ ! -f "$PYPROJECT_TOML" ]]; then
  error "No pyproject.toml found at $PYPROJECT_TOML"
  exit 1
fi
debug "Found pyproject.toml file at $PYPROJECT_TOML"

debug "Using pyproject.toml at $PYPROJECT_TOML"
debug "Using pyproject.toml at $PYPROJECT_TOML"

# build the command - let uv handle everything automatically
# uv run will automatically:
# - Create a virtual environment if needed
# - Install the correct Python version based on requires-python in pyproject.toml
# - Generate/update uv.lock if needed
# - Install dependencies from pyproject.toml/uv.lock
UV_RUN_CMD=("${UV_CMD[@]}")
UV_RUN_CMD+=("run" "--project" "$DEPENDENCIES_DIR")

# Check if the script is a Python script or a command
debug "Checking if '$DEPENDENCIES_DIR/$SCRIPT.py' exists"
if [ -f "$DEPENDENCIES_DIR/$SCRIPT" ]; then
  debug "Running Python script: $DEPENDENCIES_DIR/$SCRIPT"
  UV_RUN_CMD+=("$DEPENDENCIES_DIR/$SCRIPT")
elif [ -f "$DEPENDENCIES_DIR/$SCRIPT.py" ]; then
  debug "Running Python script: $DEPENDENCIES_DIR/$SCRIPT.py"
  UV_RUN_CMD+=("$DEPENDENCIES_DIR/$SCRIPT.py")
else
  debug "Running Python command: $SCRIPT"
  UV_RUN_CMD+=("$SCRIPT")
fi

# Add all arguments
for arg in "$@"; do
  UV_RUN_CMD+=("$arg")
done

debug "Executing: ${UV_RUN_CMD[*]}"
[[ "${BAO_BASE_VERBOSITY}" -gt 0 ]] && set -x

# Clear VIRTUAL_ENV to avoid conflicts with parent project environments
env -u VIRTUAL_ENV "${UV_RUN_CMD[@]}" || error "Failed to run Python script or command: $SCRIPT"
{ set +x; } 2>/dev/null
