#!/usr/bin/env bash
set -e -o pipefail

TAG="$1"
this=$(basename "$0")
error="error:"

# Validate the tag format using a regular expression
if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    # Ensure a tag parameter is provided
    if [ -z "$TAG" ]; then
        echo "Usage: $this <tag>"
        error="where"
    fi
    echo "$error tag must be in the form vN.N.N (e.g., v1.2.3)"
    exit 1
fi

# Ensure we are on the main branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" != "main" ]; then
    echo "$error you must be on the main branch to create and update tags"
    exit 1
fi

# Ensure there are no uncommitted changes
if [ -n "$(git status --porcelain)" ]; then
    echo "$error there are uncommitted changes in the repository - commit or stash them and try again"
    exit 1
fi

# Ensure the local branch (main) is synchronized with origin/main
if [ "$(git rev-parse HEAD)" != "$(git rev-parse origin/main)" ]; then
    echo "Error: The local main branch is not synchronized with origin/main - pull the latest changes and try again"
    exit 1
fi

# Extract the major.minor version from the tag
MAJOR_MINOR="$(echo "$TAG" | grep -oE '^v[0-9]+\.[0-9]+')"
LATEST_TAG="${MAJOR_MINOR}-latest"

# Create the new version tag and push it
git tag "$TAG"
git push origin "$TAG"

# Update the latest tag to point to the same commit as the new version tag
git tag -f "$LATEST_TAG" "$TAG"
git push origin -f "$LATEST_TAG"

echo "created tag $TAG and updated $LATEST_TAG to point to it"

REMOTE_TAGS=$(git ls-remote --tags origin | sed 's|\s*refs/tags/| |')
echo "$(git rev-parse main)" "main (local)"
echo "$(git rev-parse origin/main)" "origin/main"
echo "$REMOTE_TAGS" | grep '\-latest'
echo "$REMOTE_TAGS" | grep -v '\-latest' | sed -n '1!G;h;$p' | head -n 2