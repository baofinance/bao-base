#!/bin/bash

if [[ -n "${GUARD_SOURCING_ARGPARSING:-}" ]]; then return; fi; GUARD_SOURCING_ARGPARSING=1

source lib/bao-base/bin/modules/logging

argparsing_getopt() {
    # getopt -o and -l parameters, always have a -o defaulting to '' if none
    local this_args
    this_args=$(getopt -o o:l: -l options:,longoptions: -- "$@")
    eval set -- "$this_args"
    local long=
    local short=
    while true; do
        case "$1" in
        -o | --options)
            short+="$2"
            shift 2
            ;;
        -l | --longoptions)
            long="${long:+$long,}$2"
            shift 2
            ;;
        --)
            shift
            break;
            ;;
        *)
            logging fail "unexpected argument in $FUNCNAME: $1"
            ;;
        esac
    done

    local spec="-o ${short:-''} ${long:+-l $long}"
    logging debug "spec='$spec'"
    logging debug "options='$@'"
    # -q because we're not interested in unknown options
    logging debug "getopt -q $spec -- $@"
    getopt -q $spec -- "$@"
    local exit_code=$?
    logging debug "getopt->$exit_code"
    # ignore exit code of 1 as that happens when some args are unknown and that's ok in this context
    (( exit_code > 1 )) && logging fail "getopt returned exit code $exit_code"
    return 0
}

argparsing_remove_unknowns() {
    logging debug "$FUNCNAME($*)..."
    # get getopt to normalise then strip everything after the separating --
    # finding the ssparator is complex because,
    # although it is typically a straight-forward " -- " i.e. -- with spaces surrounding it,
    # it can sometimes be at the end of the string so it's " --" which is easy to confuse with
    # simple long options
    # worse, if you pass an option like this: --option "my -- value", there's a separator right there
    # in the middle of the getopt result!
    # we now have to use a look-back regex to find a separator that is not enclosed in a quote
    # luckily getopt canonicalises all values by single quoting them
    set -e
    argparsing_getopt "$@" | perl -pe "s/\s+--(?:\s|$)(?=(?:[^']*'[^']*')*[^']*$).*$//"
}

argparsing_has() {
    # usage argparsing_has 'option-name' -- args...
    # assumes args has been passed through argparsing_getopt in order for, e.g. -vvv to return 3
    local option="$1"
    [[ "$2" == "--" && -n "$option" ]] || logging fail "$FUNCNAME OPTION -- ARGS: $*"
    shift 2
    local count=0
    while [[ "$#" -gt "0" ]]; do
        case "$1" in
        -*) if [[ "$1" == "$option" ]]; then
                (( count++ ))
            fi
            ;;
        esac
        shift
    done
    echo "$count"
}

argparsing_default() {
    local this_args
    this_args=$(getopt -o o:d:a: -l option:,default:,alias:,aliases: -- "$@")
    eval set -- "$this_args"
    local name=
    local value=
    local all_names=
    while true; do
        case "$1" in
        -o )
            [[ $name ]] && logging fail "only specify the option once via -o or --option"
            name="-$2"
            all_names="${all_names:+$all_names,}$name"
            shift 2
            ;;
        --option )
            [[ $name ]] && logging fail "only specify the option once via -o or --option"
            name="--$2"
            all_names="${all_names:+$all_names,}$name"
            shift 2
            ;;
        -a )
            all_names="${all_names:+$all_names,}-$2"
            shift 2
            ;;
        --alias | --aliases)
            all_names="${all_names:+$all_names,}--$2"
            shift 2
            ;;
        -d | --default)
            [[ $value ]] && logging fail "only specify the default once via -d or --default"
            value=$2
            shift 2
            ;;
        --)
            shift
            break;
            ;;
        *)
            logging fail "unexpected argument in $FUNCNAME: $1"
            ;;
        esac
    done

    logging debug "name='$name'; value='$value'; all_names='$all_names'"
    logging debug "args=$@"

    [[ $name ]] || logging fail "an option must be provided via --option"
    [[ $value ]] || logging fail "a default must be provided via --default"

    # create a lookup for all the names
    declare -A lookup
    IFS=',' read -r -a names <<< "$all_names"
    for n in "${names[@]}"; do
        logging debug "   lookup n=$n"
        lookup["$n"]=1
    done

    local args=
    local found=
    while [[ "$#" -gt "0" ]]; do
        case "$1" in
        -*) [[ ${lookup["$1"]} ]] && found=1
            logging debug "alias='$1'; found='$found'"
            args+=" $1"
            ;;
        *)  args+=" '$1'"
            ;;
        esac
        shift
    done
    logging debug "args before=$args"
    [[ -z $found ]] && args+=" $name '$value'" # not there so default it
    logging debug "args after =$args"
    echo "$args"
}

argparsing_override() {
    local name="$1"                     # e.g. --private-key
    local value="$2"                    # e.g. 'secret'
    local all_names="$name${3:+,$3}"    # e.g. -p,--wallet-key,-w
    shift 3
    logging debug "name='$name'; value='$value'; all_names='$all_names'"
    logging debug "args=$@"

    # create a lookup for all the names
    declare -A lookup
    IFS=',' read -r -a names <<< "$all_names"
    for n in "${names[@]}"; do
        logging debug "   lookup n=$n"
        lookup["$n"]=1
    done

    local args=
    local found=
    while [[ "$#" -gt "0" ]]; do
        case "$1" in
        -*) [[ ${lookup["$1"]} ]] && found=1
            logging debug "alias='$1'; found='$found'"
            args+=" $1"
            ;;
        *)  args+=" '$1'"
            ;;
        esac
        shift
    done
    logging debug "args before=$args"
    [[ -z $found ]] && args+=" $name '$value'" # not there so default it
    logging debug "args after =$args"
    echo "$args"
}

argparsing_extract_getopt_spec_from_hashhash() {
    local spec_file="${1:-${BASH_SOURCE[1]}}" # default to calling script, not this one
    local short=""
    local long=""

    while IFS= read -r line; do
        # Only process lines that start with '##', have spaces, then a '-'
        [[ ! "$line" =~ ^##[[:space:]]+- ]] && continue

        # TODO: if the line doesn't have two spaces then treat the whole line as an option-spec
        # Ensure the line contains at least two spaces, separating the documentation
        if [[ "$line" =~ [[:space:]]{2,} ]]; then
            # Remove the leading `##` and extract only the option spec
            clean_line=$(sed -E 's/^##[[:space:]]+//; s/[[:space:]]{2,}.*//g' <<< "$line")

            # extract the option names and values, passing them out
            local count=0

            # Define regex patterns
            local regex_option="-[[:alnum:]_-]+"
            local regex_options="(^[[:space:]]*$regex_option([[:space:]]*,[[:space:]]*$regex_option)*)"
            # parse the options as a comma separated list
            if [[ ! "$clean_line" =~ $regex_options ]]; then
                logging fail "Failed to extract options from: '$clean_line'"
            fi

            local options_match=${BASH_REMATCH[1]} # match the comma separated list
            local values_match="${clean_line:${#options_match}}" # everything after
            # logging debug "options_match=$options_match"
            # logging debug "values_match=$values_match"

            # n n - v1 v2 v3
            # n 8 - v1 v2...
            # 2 5 - v1 v2 [v3 v4 v5]
            # 2 8 - v2 v2 [v1 v2...]
            # min is just the word count of everything up to [
            local min_args
            min_args=$(echo "${values_match%%[*}" | wc -w)

            # max is the word count of all words (ignoring [ and ]) unless there is a ..., when it is infinite
            local max_args=-1
            if [[ ! $values_match == *"..."* ]]; then
                max_args=$(echo "${values_match//[\[\].]/}" | wc -w)
            fi

            # translate the min/max_args into getopt style colons
            # : exactly one arg expected
            # :: zero-or-one arg expected
            # '' no arg expected
            # if max_args is > 1 then it's ignored
            local arg_spec=''
            if [[ "$max_args" -ge 1 ]]; then
                arg_spec=':'
                if [[ "$min_args" == "0" ]]; then
                    arg_spec='::'
                fi
            fi

            IFS=',' read -ra options <<< "$options_match"
            for option in "${options[@]}"; do
                logging debug "option=$option"
                if [[ "$option" =~ ^[[:space:]]*(--?)([^[:space:]]+)[[:space:]]*$ ]]; then
                    word="${BASH_REMATCH[2]}"
                    if [[ "${BASH_REMATCH[1]}" == "-" ]]; then
                        if [[ ${#word} -ne 1 ]]; then
                            logging fail "short form (single leading hyphen) option must only have a single letter: '$word'"
                        fi
                        short+="$word$arg_spec"
                    else
                        long="${long:+$long,}$word$arg_spec"
                    fi
                else
                    logging fail "## option spec did not match the expected pattern: -[-]word"
                fi
            done
        else
            logging fail "Invalid format or missing documentation in line: '$line'"
        fi
    done < "$spec_file"

    echo "-o ${short:-''} ${long:+-l $long}"
}

# argparsing_normalise_knowns() {
#     # getopt -o and -l parameters
#     local short="$1"
#     local long="$2"
#     shift 2

#     # iterate and convert all known option=value to option value
#     IFS=',' read -r -a items <<< "$long"
#     for long_option in "${items[@]}"; do
#         long=$(echo "$long" | sed -E "s/--$item=[\'\"]?(\S+)[\'\"]?/--$item '\1'/g")
#     done


# }

argparsing_parse_to_json() {
    # assume that the input string is well formed
    local input="$1"
    # Use getopt to reformat the input. (Make sure you quote "$input" properly.)
    local parsed
    parsed=$(getopt -o "$valid_opts_short" --long "$valid_opts_long" -- $input)
    if [[ $? -ne 0 ]]; then
        echo "Error parsing input: $input" >&2
        return 1
    fi
    eval set -- "$parsed"

    local json="[]"  # Start with an empty JSON array.
    while [[ "$1" != "--" ]]; do
        local opt="$1"
        shift
        local val=""
        # If the option takes a parameter, getopt puts it as the next argument.
        if [[ "$1" != "--" && "$1" != -* ]]; then
            val="$1"
            shift
        fi
        # Append the option object to our JSON array.
        json=$(jq --arg opt "$opt" --arg val "$val" '. += [{"option": $opt, "value": $val}]' <<< "$json")
    done

    echo "$json"
}

# Parse command-line arguments
argparsing_parse_to_json_with_spec() {
    logging debug "$FUNCNAME($@)..."

    # Load valid options into an associative array whose value is min_values, max_values
    declare -A valid_options

    local spec_file="${ARGPARSING_SPEC_FILE:-${BASH_SOURCE[1]}}" # default to calling script

    while IFS= read -r line; do
        # Only process lines that start with '##', have spaces, then a '-'
        [[ ! "$line" =~ ^##[[:space:]]+- ]] && continue

        # TODO: if the line doesn't have two spaces then treat the whole line as an option-spec
        # Ensure the line contains at least two spaces, separating the documentation
        if [[ "$line" =~ [[:space:]]{2,} ]]; then
            # Remove the leading `##` and extract only the option spec
            clean_line=$(sed -E 's/^##[[:space:]]+//; s/[[:space:]]{2,}.*//g' <<< "$line")

            # extract the option names and values, passing them out
            local count=0

            # Define regex patterns
            local regex_option="-[[:alnum:]_-]+"
            local regex_options="(^[[:space:]]*$regex_option([[:space:]]*,[[:space:]]*$regex_option)*)"
            # parse the options as a comma separated list
            if [[ ! "$clean_line" =~ $regex_options ]]; then
                logging fail "Failed to extract options from: '$clean_line'"
            fi

            local options_match=${BASH_REMATCH[1]} # match the comma separated list
            local values_match="${clean_line:${#options_match}}" # everything after
            # logging debug "options_match=$options_match"
            # logging debug "values_match=$values_match"

            # n n - v1 v2 v3
            # n 8 - v1 v2...
            # 2 5 - v1 v2 [v3 v4 v5]
            # 2 8 - v2 v2 [v1 v2...]
            # min is just the word count of everything up to [
            local min_args
            min_args=$(echo "${values_match%%[*}" | wc -w)

            # max is the word count of all words (ignoring [ and ]) unless there is a ..., when it is infinite
            local max_args=-1
            if [[ ! $values_match == *"..."* ]]; then
                max_args=$(echo "${values_match//[\[\].]/}" | wc -w)
            fi

            IFS=',' read -ra options <<< "$options_match"

            for option in "${options[@]}"; do
                option="${option#"${option%%[![:space:]]*}"}"  # Trim leading spaces
                option="${option%"${option##*[![:space:]]}"}"  # Trim trailing spaces
                valid_options["$option"]="$min_args $max_args"
                logging debug "valid option -> $option $min_args $max_args"
            done

        else
            logging fail "Invalid format or missing documentation in line: '$line'"
        fi
    done < "$spec_file"

    # Process user-supplied arguments
    local json="{}"

    while [[ $# -gt 0 ]]; do
        local arg="$1"
        shift
        # TODO: handle arg=x,y,z
        local name="$arg"

        # Check if it's a valid option
        if [[ -v valid_options["$name"] ]]; then
            min_args=$(cut -d ' ' -f1 <<< "${valid_options[$name]}")
            max_args=$(cut -d ' ' -f2 <<< "${valid_options[$name]}")
            logging debug "name=$name; min_args=$min_args; max_args=$max_args"

            json=$(echo "$json" | jq -c ". + {\"$name\": []}")
            local arg_count=0
            # Collect arguments based on min/max requirements
            for ((i = 0; i < max_args || max_args == -1; i++)); do
                [[ $# -gt 0 && ! "$1" =~ ^- ]] || break
                ((arg_count++))
                logging debug "$arg_count: '$1'"
                # TODO: handle numerics?
                json=$(echo "$json" | jq -c ".[\"$name\"] += [\"$1\"]")
                shift
            done

            # Validate collected arguments against min/max constraints
            if (( $arg_count < min_args )); then
                logging fail "Option '$arg' requires at least $min_args arguments, but got ${#values[@]}."
            fi

        # else
        #     logging fail "Unknown option '$arg'"
        fi
    done

    echo "$json"
}


##################################
# #!/bin/bash
# set -e

# # --- Configuration: known defaults spec ---
# # These are the options that the defaults string uses.
# # The getopt spec tells us which options take arguments.
# valid_opts_short="a:n:v"          # For example: -a and -n take an argument; -v is a flag.
# valid_opts_long="alpha:,number:,verbose"  # Example: --alpha and --number take arguments; --verbose is a flag.

# # --- Logging functions ---
# logging_debug() { echo "DEBUG: $*"; }
# logging_fail()  { echo "FAIL: $*" >&2; exit 1; }

# # --- Function: parse_cmdline_json ---
# # Parse the defaults string using getopt into a JSON array.
# # Each element is an object: { "option": <option>, "value": <argument or empty> }
# parse_cmdline_json() {
#     local input="$1"
#     local parsed
#     parsed=$(getopt -o "$valid_opts_short" --long "$valid_opts_long" -- $input)
#     if [[ $? -ne 0 ]]; then
#         logging_fail "Error parsing defaults: $input"
#     fi
#     eval set -- "$parsed"
#     local json="[]"
#     while [[ "$1" != "--" ]]; do
#         local opt="$1"
#         shift
#         local val=""
#         if [[ "$1" != "--" && "$1" != -* ]]; then
#             val="$1"
#             shift
#         fi
#         json=$(jq --arg opt "$opt" --arg val "$val" '. += [{"option": $opt, "value": $val}]' <<< "$json")
#     done
#     echo "$json"
# }

# # --- Function: normalize_overrides ---
# # This function normalizes an overrides command-line string.
# # It converts long options with equals signs to space-separated form,
# # expands combined short options (e.g. -aux becomes -a -u -x) based on our known spec,
# # and expands repeated flags (e.g. -vvv becomes -v -v -v).
# normalize_overrides() {
#     local input="$1"
#     local output="$input"

#     # 1. Convert --option=value to --option value.
#     output=$(echo "$output" | sed -E 's/--([^=[:space:]]+)=(\S+)/--\1 \2/g')

#     # 2. Expand combined short options.
#     # For each token in the output, if it starts with "-" but not "--", and its length is > 2,
#     # iterate over its characters (after the dash) and, using our known spec,
#     # split it into individual tokens.
#     expand_combined() {
#         local token="$1"
#         local result=""
#         # If token starts with "--", leave it alone.
#         if [[ "$token" == --* ]]; then
#             echo "$token"
#             return
#         fi
#         # If token does not start with "-", leave it alone.
#         if [[ "$token" != -* ]]; then
#             echo "$token"
#             return
#         fi
#         # Remove the leading dash.
#         local letters="${token:1}"
#         local i len flag arg
#         len=${#letters}
#         for (( i=0; i<len; i++ )); do
#             flag="-${letters:i:1}"
#             # Check if this short option takes an argument.
#             # In valid_opts_short, if the option letter is immediately followed by a colon, then it takes an argument.
#             if [[ "$valid_opts_short" == *"${letters:i:1}:"* ]]; then
#                 # If there are remaining characters after this letter, treat them as the argument.
#                 if (( i+1 < len )); then
#                     arg="${letters:i+1}"
#                     result+="$flag $arg "
#                     break  # Stop processing further letters.
#                 else
#                     result+="$flag "
#                 fi
#             else
#                 result+="$flag "
#             fi
#         done
#         echo "$result"
#     }

#     local normalized=""
#     for token in $output; do
#         normalized+=" $(expand_combined "$token")"
#     done
#     # Remove extra whitespace.
#     echo "$normalized" | xargs
# }

# # --- Function: parse_overrides_json ---
# # Since we don't have a getopt spec for overrides,
# # we simply split the normalized override string by whitespace.
# # We assume that any option that starts with '-' is an option,
# # and if followed by a non-option token, that is its value.
# parse_overrides_json() {
#     local input="$1"
#     local -a tokens
#     # Read tokens into an array.
#     read -r -a tokens <<< "$input"
#     local json="[]"
#     local i=0 token val
#     while (( i < ${#tokens[@]} )); do
#         token="${tokens[i]}"
#         if [[ "$token" == -* ]]; then
#             # Assume the next token is a value if it exists and doesn't start with '-'
#             if (( i+1 < ${#tokens[@]} )); then
#                 if [[ "${tokens[i+1]}" != -* ]]; then
#                     val="${tokens[i+1]}"
#                     (( i+=2 ))
#                 else
#                     val=""
#                     (( i++ ))
#                 fi
#             else
#                 val=""
#                 (( i++ ))
#             fi
#             json=$(jq --arg opt "$token" --arg val "$val" '. += [{"option": $opt, "value": $val}]' <<< "$json")
#         else
#             (( i++ ))
#         fi
#     done
#     echo "$json"
# }

# # --- Function: merge_cmdline_json ---
# # Merge defaults JSON and overrides JSON.
# # For each option in the defaults array (preserving order),
# # if an override exists (matching the option string exactly), use the override value.
# # Then, append any options from overrides that do not exist in defaults.
# merge_cmdline_json() {
#     local defaults_json="$1"
#     local overrides_json="$2"
#     local merged_json
#     merged_json=$(jq -s '
#       # Defaults are .[0], overrides are .[1]
#       (.[0] | map({(.option): .value}) | add) as $defaults |
#       (.[1] | map({(.option): .value}) | add) as $overrides |
#       ($defaults + $overrides) as $merged |
#       # Preserve order: list keys in defaults first, then any new keys from overrides.
#       (.[0] | map(.option)) as $defaultOrder |
#       ($merged | to_entries | sort_by( ( .key as $k | index($defaultOrder[]) // 1e9) ) | map({option: .key, value: .value}))
#     ' <(echo "$defaults_json") <(echo "$overrides_json"))
#     echo "$merged_json"
# }

# # --- Function: build_cmdline_from_json ---
# # Reconstruct the final command-line string from the merged JSON array.
# build_cmdline_from_json() {
#     local json="$1"
#     jq -r 'map(.option + (if .value != "" then " " + .value else "" end)) | join(" ")' <<< "$json"
# }

# # --- Main Program ---
# # Example defaults and overrides strings.
# defaults_string="--alpha defaultAlpha -a defaultA --beta defaultBeta"
# overrides_string="--beta=overrideBeta --unknown overrideUnknown -a overrideA -aux -vvv"

# logging_debug "Defaults string: $defaults_string"
# logging_debug "Overrides string: $overrides_string"

# # Parse defaults with getopt into JSON.
# defaults_json=$(parse_cmdline_json "$defaults_string")
# logging_debug "Defaults JSON:"; echo "$defaults_json" | jq .

# # Normalize overrides (expand combined options, convert --opt=value)
# normalized_overrides=$(normalize_overrides "$overrides_string")
# logging_debug "Normalized Overrides: $normalized_overrides"

# # Parse overrides (without getopt) into JSON.
# overrides_json=$(parse_overrides_json "$normalized_overrides")
# logging_debug "Overrides JSON:"; echo "$overrides_json" | jq .

# # Merge the two JSON arrays.
# merged_json=$(merge_cmdline_json "$defaults_json" "$overrides_json")
# logging_debug "Merged JSON:"; echo "$merged_json" | jq .

# # Build final command-line string.
# final_cmdline=$(build_cmdline_from_json "$merged_json")
# echo "Final command line: $final_cmdline"
