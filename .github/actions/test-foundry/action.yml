name: Test Foundry
description: "runs all the tests for a Foundry solidity project"

# secrets:
#   DEFAULT_MAINNET_RPC_URL:
#     description: "default API URL for accessing blockchain service"
#     required: false
inputs:
  # os:
  #   description: "Operating system to test"
  #   required: true
  #   type: string
  foundry:
    description: "Foundry version to test"
    required: true
  cwd:
    description: "Directory to run commands in"
    required: false
    default: "."

runs:
  using: "composite"
  steps:
    - name: Check Environment
      shell: bash
      run: |
        echo "runner.os=${{ runner.os }}"
        python3 -c "import platform; info = f'{platform.system()} {platform.release()} {platform.version()} {platform.machine()}'; print('-' * len(info)); print(info); print('-' * len(info))"
        bash --version

    - name: Install Bash 5.2 (on macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install bash
        bash --version

    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: ${{ inputs.FOUNDRY }}

    - shell: bash
      run: |
        forge --version

    - name: Install project dependencies
      shell: bash
      run: |
        cd ${{ inputs.cwd }}
        yarn

    - name: Run Prettier
      shell: bash
      run: |
        cd ${{ inputs.cwd }}
        yarn prettier --check
      id: prettier

    - name: Run Solhint
      shell: bash
      run: |
        cd ${{ inputs.cwd }}
        yarn lint
      id: lint

    - name: Run Slither
      shell: bash
      run: |
        cd ${{ inputs.cwd }}
        yarn slither
      id: slither

    - name: Run Forge build, generating contract sizes reports into the regression folder - if they differ from the ones in the repo, they will be failed in the git-diffs step
      if: runner.os != 'Windows' # TODO: for some reason, the sizes processing doesn't work on windows
      shell: bash
      run: |
        # generate contract sizes reports into the regression folder - if they differ from the ones in the repo, they will be failed in the git-diffs step
        cd ${{ inputs.cwd }}
        yarn sizes
      id: sizes

    - name: Run Forge tests
      shell: bash
      run: |
        # run all the foundry tests in the test folder
        cd ${{ inputs.cwd }}
        yarn test
      id: test

    - name: Run Forge tests - coverage
      if: runner.os != 'Windows' # TODO: for some reason, the coverage processing doesn't work on windows
      shell: bash
      run: |
        # generate coverage reports into the regression folder - if they differ from the ones in the repo, they will be failed in the git-diffs step
        cd ${{ inputs.cwd }}
        yarn coverage
      id: coverage

    - name: Run Forge tests - gas
      if: runner.os != 'Windows' # TODO: for some reason, the gas processing doesn't work on windows
      shell: bash
      run: |
        # generate gas reports into the regression folder - if they differ from the ones in the repo, they will be failed in the git-diffs step
        cd ${{ inputs.cwd }}
        yarn gas
      id: gas

    - name: Run upgradeable contract deployment validation
      shell: bash
      run: |
        # check all contracts for deployment upgradeability
        cd ${{ inputs.cwd }}
        yarn validate
      id: validate

    - name: Check for changed repo files
      shell: bash
      run: |
        # if the above created or changed any repo files, then print a diff and fail
        cd ${{ inputs.cwd }}
        git status --short
        git diff --minimal
        [[ $(git status --short | wc -l) -gt 0 ]] && {
          echo "Git repo has changed, either correctly fix those files locally or .gitignore them"; exit 1;
        } || echo "No changes detected in git repo"
      id: git-diffs

    - name: Check some wtf's
      shell: bash
      run: |
        # if the package.json file has a wtf script, run it
        # if it returns anything, print it then fail the action
        cd ${{ inputs.cwd }}
        if jq -e '.scripts.wtf' package.json >/dev/null; then
          out=$(yarn wtf)
          echo "$out"
          if [ -n "$out" ]; then
            echo "wt(actual)f: issues detected by running 'yarn wtf' (which is an optional script in package.json used to detect project bespoke issues)"
            exit 1
          fi
          echo "wtf: no issues detected by running 'yarn wtf' (which is an optional script in package.json used to detect project bespoke issues)"
        fi
        echo "wtf: no script "wtf" in package.json, which is fine and dandy as 'yarn wtf' is an optional script in package.json used to detect project bespoke issues"
        exit 0
      id: wtf
