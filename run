#!/usr/bin/env bash
set -euo pipefail

# set up where everything is, including backing out symlinks
bao_base_dir_abs="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
export BAO_BASE_DIR_REL="$(python3 -c "import os.path; print(os.path.relpath('$bao_base_dir_abs', '$(pwd)'))")"
export BAO_BASE_DIR=$(cd "$BAO_BASE_DIR_REL" && pwd)
export BAO_BASE_BIN_DIR="$BAO_BASE_DIR/bin"
export BAO_BASE_SCRIPT_DIR="$BAO_BASE_DIR/script"
export BAO_BASE_TOOLS_DIR="$BAO_BASE_DIR/.tools"
export BAO_BASE_VERBOSITY=${VERBOSITY:-0} # allow ths to be passed in as an env var

# Process flags for quiet mode and verbosity
_process_opts() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -q | --quiet)
                BAO_BASE_VERBOSITY=-1000
                shift
                ;;
            -v)
                BAO_BASE_VERBOSITY=1
                shift
                ;;
            -vv)
                BAO_BASE_VERBOSITY=2
                shift
                ;;
            -vvv)
                BAO_BASE_VERBOSITY=3
                shift
                ;;
            -vvvv)
                BAO_BASE_VERBOSITY=4
                shift
                ;;
            *) # Not a flag we process here
                break ;;
        esac
    done
    echo "$@"
}
set -- $(_process_opts "$@")

source "$BAO_BASE_BIN_DIR/run/logging"
_process_opts $(debug_opts)

debug "Starting run script"
debug "BAO_BASE_VERBOSITY=$BAO_BASE_VERBOSITY"
debug "BAO_BASE_DIR=$BAO_BASE_DIR"
debug "BAO_BASE_DIR_REL=$BAO_BASE_DIR_REL"
debug "BAO_BASE_BIN_DIR=$BAO_BASE_BIN_DIR"
debug "BAO_BASE_SCRIPT_DIR=$BAO_BASE_SCRIPT_DIR"
debug "BAO_BASE_TOOLS_DIR=$BAO_BASE_TOOLS_DIR"

# Detect OS and set environment variables
source "./bin/platform-utils.sh"
detect_platform
debug "BAO_BASE_OS=$BAO_BASE_OS"
debug "BAO_BASE_OS_SUBTYPE=$BAO_BASE_OS_SUBTYPE"
debug "BAO_BASE_OS_VERSION=$BAO_BASE_OS_VERSION"

# Check if we have any arguments left
if [[ $# -lt 1 ]]; then
    error "No script specified"
    exit 1
fi

debug "Verbosity level set to: $BAO_BASE_VERBOSITY"

SCRIPT_NAME="$1"
shift
SCRIPT_PATH="$BAO_BASE_BIN_DIR/$SCRIPT_NAME"

debug "SCRIPT_NAME=$SCRIPT_NAME"
debug "SCRIPT_PATH=$SCRIPT_PATH"
debug "Remaining args: $*"

# Auto-detect script type
debug "Detecting script type for $SCRIPT_NAME"

# First check if it's a directory
if [[ -d "$SCRIPT_PATH" && -x "$SCRIPT_PATH/run.sh" ]]; then
    info 0 "Running: $BAO_BASE_DIR_REL/bin/$SCRIPT_NAME/run.sh${*:+ $*}"
    debug "Directory has an executable run.sh script"
    "$SCRIPT_PATH/run.sh" "$@" || {
        exit_code=$?
        error "Directory run script execution failed with code $exit_code"
    }

# Check if we have a wrapper script that provides execution instructions
else
    if [[ -f "$SCRIPT_PATH" ]]; then
        # Check shebang to determine type - safely read first line
        file_type=""
        shebang=""
        if [[ -s "$SCRIPT_PATH" ]]; then
            shebang=$(head -n 1 "$SCRIPT_PATH" 2> /dev/null || echo "")
            debug "Found executable script with shebang: $shebang"
        else
            error "Script file exists but is empty or unreadable"
            exit 1
        fi

        if [[ "$shebang" == *"python"* ]]; then
            debug "Detected as Python script (executable)"
            script_type="python"
        elif [[ "$shebang" == *"bash"* ]]; then
            debug "Detected as Bash script (executable)"
            script_type="bash"
        elif [[ "$shebang" == *"node"* ]]; then
            debug "Detected as Node.js script (executable)"
            script_type="node"
        else
            error "Unknown #! type: $shebang"
            exit 1
        fi
    else
        # Check for module files directly in bin directory
        if [[ -f "$BAO_BASE_BIN_DIR/$SCRIPT_NAME.py" ]]; then
            debug "Found Python module file in bin"
            file_type=".py"
            script_type="python"
        elif [[ -f "$BAO_BASE_BIN_DIR/$SCRIPT_NAME.js" ]]; then
            debug "Found Node.js module file in bin"
            file_type=".js"
            script_type="node"
        elif [[ -f "$BAO_BASE_BIN_DIR/$SCRIPT_NAME.sh" ]]; then
            debug "Found Bash module file in bin"
            file_type=".sh"
            script_type="bash"
        else
            error "unknown file type for target: $SCRIPT_NAME"
            exit 1
        fi
    fi

    info 0 "Running as $script_type: $BAO_BASE_DIR_REL/bin/$SCRIPT_NAME$file_type${*:+ $*}"

    case "$script_type" in
        python)
            debug "Executing via run-python"
            "$BAO_BASE_BIN_DIR/run-python" "$SCRIPT_NAME" "$@" || {
                exit_code=$?
                error "Python script execution failed with code $exit_code"
            }
            ;;
        node)
            debug "Executing via run-node"
            "$BAO_BASE_BIN_DIR/run-node" "$SCRIPT_NAME" "$@" || {
                exit_code=$?
                error "Node.js script execution failed with code $exit_code"
            }
            ;;
        bash)
            debug "Executing via run-bash"
            "$BAO_BASE_BIN_DIR/run-bash" "$SCRIPT_NAME" "$@" || {
                exit_code=$?
                error "Bash script execution failed with code $exit_code"
            }
            ;;
    esac

fi

exit_code=0

# Execute based on script type (inlined from run_script)

debug "Script execution completed successfully with exit code: $exit_code"
exit $exit_code
